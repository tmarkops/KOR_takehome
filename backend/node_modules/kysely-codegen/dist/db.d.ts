import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type NotificationType = "friend_request" | "friend_request_accepted" | "post";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Friend {
  created_at: Generated<Timestamp | null>;
  id: Generated<number>;
  user_id_a: number;
  user_id_b: number;
}

export interface FriendRequest {
  created_at: Generated<Timestamp | null>;
  id: Generated<number>;
  user_id_receiver: number;
  user_id_sender: number;
}

export interface Notification {
  created_at: Generated<Timestamp | null>;
  id: Generated<number>;
  /**
   * ID of the related post or friend_request
   */
  related_id: number;
  type: NotificationType;
  user_id: number;
}

export interface Pgmigrations {
  id: Generated<number>;
  name: string;
  run_on: Timestamp;
}

export interface Post {
  content: string;
  created_at: Generated<Timestamp | null>;
  id: Generated<number>;
  user_id: number;
}

export interface User {
  created_at: Generated<Timestamp | null>;
  id: Generated<number>;
  username: string;
}

export interface DB {
  friend: Friend;
  friend_request: FriendRequest;
  notification: Notification;
  pgmigrations: Pgmigrations;
  post: Post;
  user: User;
}
